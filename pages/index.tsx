import HomeNav from "@/Components/Nav/HomeNav";
import Head from "next/head";
import Image from "next/image";
import Link from "next/link";
import styles from "../styles/Index.module.css";
import {IndexInfo} from "@/types";
import {
  getFirestore,
  collection,
  getDocs,
  Timestamp,
  query,
  where,
} from "firebase/firestore";
import {app} from "@/service/firebase";
import {useEffect, useState} from "react";
import convertToMoneyFormat from "@/utils/moneyFormat";
import dateFormatter from "@/utils/dateFormat";
import {useDispatch, useSelector} from "react-redux";
import {RootState} from "../store/store";
import {onAuthStateChanged} from "firebase/auth";
import {auth} from "@/service/firebase";
import {login, logout} from "@/store/userSlice";
import {useAuth} from "@/hooks/useAuth";
const getGuFormAddress = (address: string) => {
  const guIndex = address.indexOf("구");
  const seoulIndex = address.indexOf("서울시");

  if (guIndex === -1) {
    return null;
  } else if (guIndex === 4) {
    return "서울시 구로구";
  }

  if (seoulIndex === -1) {
    return address.substring(0, guIndex + 1);
  }

  return address.substring(seoulIndex, guIndex + 1);
};

export default function Home() {
  const {user, loading} = useAuth();
  const [posts, setPosts] = useState<IndexInfo[]>([]);
  const dispatch = useDispatch();
  const isLoggedIn = useSelector((state: RootState) => state.user);

  console.log(isLoggedIn);

  useEffect(() => {
    const db = getFirestore(app);
    const collectionRef = collection(db, "house_info");

    const fetchData = async () => {
      const q = query(collectionRef, where("exposure", "==", true));
      const querySnapshot = await getDocs(q);
      const newPosts: IndexInfo[] = querySnapshot.docs
        .map((doc) => {
          const data = doc.data();

          const deadlineAt =
            data.deadline_at instanceof Timestamp
              ? data.deadline_at.toDate()
              : new Date(data.deadline_at);

          return {
            id: doc.id,
            deadline_at: deadlineAt,
            address: data.address,
            category: data.category,
            deposit: data.deposit,
            rent: data.rent,
            area: data.area,
            exposure: data.exposure,
          };
        })
        .sort(
          (a, b) =>
            new Date(a.deadline_at).getTime() -
            new Date(b.deadline_at).getTime()
        );

      setPosts(newPosts);
    };

    fetchData();
    const unsubscribe = onAuthStateChanged(auth, (user) => {
      if (user) {
        dispatch(login(user));
      } else {
        dispatch(logout());
      }
    });
    return () => {
      unsubscribe();
    };
  }, [dispatch]);

  if (loading) {
    return <div>Loading...</div>;
  }

  return (
    <>
      <Head>
        <title>집패스</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <>
        <HomeNav />
        <div className={styles.container}>
          <div className="w-[88%] m-auto">
            <div className="my-9">
              <div className="text-xl font-bold">공고 리스트</div>
            </div>

            <ul className="space-y-5 h-full w-full">
              {posts.map((post) => (
                <li key={post.id}>
                  <Link
                    className="rounded-xl border-gray-100  bg-white drop-shadow-md
                    h-160 flex items-center"
                    href={`detail/${post.id}`}
                  >
                    <div className="rounded-lg w-24 h-32 bg-[#1F2526] m-4 ">
                      <div className="flex flex-col justify-center items-center h-full">
                        <p className="font-medium text-sm text-white">마감일</p>
                        <p className="font-semibold text-3xl text-white">
                          {dateFormatter(post.deadline_at).month}월
                        </p>
                        <p className="font-semibold text-3xl text-white">
                          {dateFormatter(post.deadline_at).day}일
                        </p>
                      </div>
                    </div>
                    <div className="flex flex-col justify-start">
                      <p className="text-xl font-bold text-[#1BC378]">
                        당첨 확률
                      </p>
                      <div className="pt-1.5">
                        <p className="text-base text-[#526466]">
                          {getGuFormAddress(post.address)}
                        </p>
                        <p className="text-base text-[#526466]">
                          보증금 {convertToMoneyFormat(post.deposit)}원
                        </p>
                        <p className="text-base text-[#526466]">
                          월세 {convertToMoneyFormat(post.rent)}원
                        </p>
                        <p className="text-[#526466] text-sm">
                          {post.category}
                        </p>
                      </div>
                    </div>
                  </Link>
                </li>
              ))}
            </ul>
          </div>
        </div>
      </>
    </>
  );
}
